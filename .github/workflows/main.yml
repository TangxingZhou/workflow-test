name: Study and Test

on:
  workflow_dispatch:
    inputs:
      action:
        description: The action to perform
        required: true
        type: choice
        options:
          - backup
          - restore
          - upgrade
          - clear
        default: upgrade
env:
  DEFAULT_MO_BRANCH: 1.1-dev
  DEFAULT_MO_VERSION: v1.1.2
jobs:
  moc-test:
    runs-on: ubuntu-latest
    environment:
      name: qa
    steps:
      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Prepare
        if: ${{ inputs.action == 'upgrade' }}
        id: prep
        shell: bash
        run: |
          UPGRADE_IMAGE_REPOSITORY=$(echo $UPGRADE_IMAGE_REPOSITORY)
          UPGRADE_CLUSTER_VERSION=$(echo $UPGRADE_CLUSTER_VERSION)

          # set output parameters
          if [ -z $UPGRADE_IMAGE_REPOSITORY -o -z $UPGRADE_CLUSTER_VERSION ]; then
            echo "upgrade-image-repository=" >> $GITHUB_OUTPUT
            echo "upgrade-cluster-version=" >> $GITHUB_OUTPUT
          else
            echo "upgrade-image-repository=${UPGRADE_IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
            echo "upgrade-cluster-version=${UPGRADE_CLUSTER_VERSION}" >> $GITHUB_OUTPUT
          fi
        env:
          UPGRADE_IMAGE_REPOSITORY: ${{ vars.UPGRADE_IMAGE_REPOSITORY }}
          UPGRADE_CLUSTER_VERSION: ${{ vars.UPGRADE_CLUSTER_VERSION }}
      
      - name: Check
        if: ${{ steps.prep.outputs.upgrade-image-repository }}
        run: |
          echo "check"
        env:
          UPGRADE_IMAGE_REPOSITORY: ${{ steps.prep.outputs.upgrade-image-repository }}
      
      - name: Build Image
        if: ${{ inputs.action == 'upgrade' && (!steps.prep.outputs.upgrade-image-repository || !steps.prep.outputs.upgrade-image-repository) }}
        run: |
          echo "build mo image"
      
      - name: Run Tests
        if: ${{ inputs.action == 'upgrade' }}
        run: |
          env
          echo "run tests"
          echo $UPGRADE_IMAGE_REPOSITORY:$UPGRADE_CLUSTER_VERSION
          echo $ACR_USERNAME:$ACR_TOKEN
        env:
          ACR_USERNAME: ${{ secrets.ACR_USERNAME}}
          ACR_TOKEN: ${{ secrets.ACR_TOKEN}}
          UPGRADE_IMAGE_REPOSITORY: ${{ steps.prep.outputs.upgrade-image-repository || env.DEFAULT_MO_BRANCH }}
          UPGRADE_CLUSTER_VERSION: ${{ steps.prep.outputs.upgrade-image-version || env.DEFAULT_MO_VERSION }}
      
      # - name: Checkout mocloud-tester
      #   uses: actions/checkout@v3
      #   with:
      #     repository: TangxingZhou/workflow-test
      #     ref: main

      # - name: Echo github workspace
      #   run: |
      #     echo $GITHUB_WORKSPACE

      # - name: Set up Python3.8
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.8'

#      - name: Set up Java1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8

      # - name: Install Allure
      #   run: |
      #     export ALLURE_VERSION=2.20.0
      #     curl -o allure-$ALLURE_VERSION.tgz -sL https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$ALLURE_VERSION/allure-commandline-$ALLURE_VERSION.tgz
      #     sudo tar -zxvf allure-$ALLURE_VERSION.tgz -C /usr/local/bin/
      #     sudo ln -s /usr/local/bin/allure-$ALLURE_VERSION/bin/allure /usr/bin/allure

      # - name: Install Python Dependencies
      #   run: |
      #     cd $GITHUB_WORKSPACE/moc-tester
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt

      # - name: Run Aliyun Tests Case
      #   run: |
      #     cd $GITHUB_WORKSPACE/moc-tester
      #     pytest src/tests/test_k8s_api.py --alluredir=./allure-results
      #   env:
      #     env: qa
      #     provider: aliyun
      #     region: cn-hangzhou
      #     k8s_unit_config: ${{secrets.K8S_UNIT_CONFIG}}
      #     # k8s_unit_host: ${{secrets.K8S_UNIT_HOST}}
      #     # k8s_unit_ca_cert: ${{secrets.K8S_UNIT_CA_CERT}}
      #     # k8s_unit_user_cert: ${{secrets.K8S_UNIT_USER_CERT}}
      #     # k8s_unit_user_key: ${{secrets.K8S_UNIT_USER_KEY}}
      #     k8s_controller_config: ${{secrets.K8S_CONTROLLER_CONFIG}}
      #     # k8s_controller_host: ${{secrets.K8S_CONTROLLER_HOST}}
      #     # k8s_controller_ca_cert: ${{secrets.K8S_CONTROLLER_CA_CERT}}
      #     # k8s_controller_user_cert: ${{secrets.K8S_CONTROLLER_USER_CERT}}
      #     # k8s_controller_user_key: ${{secrets.K8S_CONTROLLER_USER_KEY}}
      
      # - name: Load Test Report History
      #   uses: actions/checkout@v3
      #   if: always()
      #   continue-on-error: true
      #   with:
      #     ref: allure-reports
      #     path: allure-reports/aliyun
      
      # - name: Build Test Report
      #   uses: simple-elf/allure-report-action@v1.7
      #   if: always()
      #   with:
      #     gh_pages: allure-reports
      #     allure_history: allure-history
      #     allure_results: moc-tester/allure-results
      #     keep_reports: 50
      
      # - name: Publish Test Report
      #   uses: peaceiris/actions-gh-pages@v3
      #   if: always()
      #   with:
      #       github_token: ${{ secrets.GITHUB_TOKEN }}
      #       publish_branch: allure-reports
      #       publish_dir: allure-history
