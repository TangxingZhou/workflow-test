name: Restore MO Data
on:
#   schedule:
#     - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      backup_s3_bucket:
        description: Backups to be made into the S3 bucket
        required: false
        type: string
      backup_s3_bucket_file_path:
        description: Backups to be made into the S3 bucket path
        required: false
        type: string
      backup_id:
        description: Backup id
        required: false
        type: string
      restore_cluster:
        description: The cluster to be restored
        required: false
        type: string
        default: only-restore-data
      restore_cluster_version:
        description: The cluster version to be restored
        required: false
        type: string
        default: 'nightly-9d616832a'
      restore_s3_bucket:
        description: The S3 bucket to restore
        required: false
        type: string
        default: 'moc-backup-test'
      restore_s3_bucket_file_path:
        description: The S3 bucket path to restore
        required: false
        type: string
env:
  email: ${{ vars.UPGRADE_TEST_EMAIL }}
  password: ${{ secrets.UPGRADE_TEST_PASSWORD }}
  database_platform_password: ${{ secrets.DATABASE_PLATFORM_PASSWORD }}
  management_platform_url: ${{ secrets.MANAGEMENT_PLATFORM_URL }}
  management_platform_user: ${{ secrets.MANAGEMENT_PLATFORM_USER }}
  management_platform_password: ${{ secrets.MANAGEMENT_PLATFORM_PASSWORD }}
  env: qa
  provider: aliyun
  region: cn-hangzhou
  k8s_unit_config: ${{ secrets.K8S_UNIT_CONFIG }}
  k8s_controller_config: ${{ secrets.K8S_CONTROLLER_CONFIG }}
jobs:
    restore-data:
      runs-on: ubuntu-latest
      environment:
        name: qa
  
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            repository: matrixone-cloud/mocloud-tester
            ref: qa-txzhou
            token: ${{ secrets.GH_PAT }}
  
        - name: Set Up Python3.8
          uses: actions/setup-python@v5
          with:
            python-version: '3.8'
  
        - name: Install Python Dependencies
          run: |
            cd $GITHUB_WORKSPACE
            python -m pip install --upgrade pip
            pip install -r requirements.txt
  
        - name: Restore MOC Data
          id: restore
          run: |
            cd $GITHUB_WORKSPACE
            export PYTHONPATH=$(pwd)
            python src/script/upgrade_test/main.py restore --only-data
          env:
            BACKUP_ALIYUN_AK: ${{ secrets.BACKUP_ALIYUN_AK }}
            BACKUP_ALIYUN_SK: ${{ secrets.BACKUP_ALIYUN_SK }}
            RESTORE_ALIYUN_AK: ${{ secrets.RESTORE_ALIYUN_AK }}
            RESTORE_ALIYUN_SK: ${{ secrets.RESTORE_ALIYUN_SK }}
            BACKUP_S3_BUCKET: ${{ inputs.backup_s3_bucket || vars.BACKUP_S3_BUCKET }}
            BACKUP_S3_BUCKET_FILE_PATH: ${{ inputs.backup_s3_bucket_file_path || vars.BACKUP_S3_BUCKET_FILE_PATH }}
            BACKUP_ID: ${{ inputs.backup_id || vars.BACKUP_ID }}
            RESTORE_CLUSTER: ${{ inputs.restore_cluster || 'only-restore-data' }}
            RESTORE_CLUSTER_VERSION: ${{ inputs.restore_cluster_version || vars.RESTORE_CLUSTER_VERSION }}
            # RESTORE_ROOT_USERNAME: ${{ secrets.restore_root_username }}
            # RESTORE_ROOT_PASSWORD: ${{ secrets.restore_root_password }}
            RESTORE_S3_BUCKET: ${{ inputs.restore_s3_bucket || vars.RESTORE_S3_BUCKET }}
            RESTORE_S3_BUCKET_FILE_PATH: ${{ inputs.restore_s3_bucket_file_path || vars.RESTORE_S3_BUCKET_FILE_PATH }}
            # MO_IMAGE_REPOSITORY: ${{ vars.MO_IMAGE_REPOSITORY }}
            # MOC_PLUGIN_IMAGE: ${{ vars.MOC_PLUGIN_IMAGE }}
          continue-on-error: true
        
        - name: Restore MOC Data Again
          if: steps.restore.outcome == 'failure'
          run: |
            cd $GITHUB_WORKSPACE
            export PYTHONPATH=$(pwd)
            python src/script/upgrade_test/main.py restore --only-data
          env:
            BACKUP_ALIYUN_AK: ${{ secrets.BACKUP_ALIYUN_AK }}
            BACKUP_ALIYUN_SK: ${{ secrets.BACKUP_ALIYUN_SK }}
            RESTORE_ALIYUN_AK: ${{ secrets.RESTORE_ALIYUN_AK }}
            RESTORE_ALIYUN_SK: ${{ secrets.RESTORE_ALIYUN_SK }}
            BACKUP_S3_BUCKET: ${{ inputs.backup_s3_bucket || vars.BACKUP_S3_BUCKET }}
            BACKUP_S3_BUCKET_FILE_PATH: ${{ inputs.backup_s3_bucket_file_path || vars.BACKUP_S3_BUCKET_FILE_PATH }}
            BACKUP_ID: ${{ inputs.backup_id || vars.BACKUP_ID }}
            RESTORE_CLUSTER: ${{ inputs.restore_cluster || 'only-restore-data' }}
            RESTORE_CLUSTER_VERSION: ${{ inputs.restore_cluster_version || vars.RESTORE_CLUSTER_VERSION }}
            RESTORE_S3_BUCKET: ${{ inputs.restore_s3_bucket || vars.RESTORE_S3_BUCKET }}
            RESTORE_S3_BUCKET_FILE_PATH: ${{ inputs.restore_s3_bucket_file_path || vars.RESTORE_S3_BUCKET_FILE_PATH }}

        - name: Upload Logs
          uses: actions/upload-artifact@v4
          if: always()
          with:
            name: upgrade-test-logs
            path: |
              ${{ github.workspace }}/*.log
            retention-days: 7
