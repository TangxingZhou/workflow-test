name: To Test

on:
  workflow_dispatch:
jobs:
  # restore:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: qa
  #   outputs:
  #     mo-host: ${{ steps.restore.outputs.mo-host }}
  #     mo-port: ${{ steps.restore.outputs.mo-port }}
  #     mo-user: ${{ steps.restore.outputs.mo-user }}
  #     mo-password: ${{ steps.restore.outputs.mo-password }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         path: tests
  #     - name: Set Up Python3.8
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.8'
  #     - name: Checkout mo-load
  #       uses: actions/checkout@v4
  #       with:
  #         repository: matrixorigin/mo-load
  #         ref: main
  #         path: mo-load
  #         token: ${{ secrets.GH_PAT }}
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         repository: matrixorigin/mo-sysbench
  #         path: mo-sysbench
  #         token: ${{ secrets.GH_PAT }}
  #     - name: Set up Java1.8
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 8
  #   #   - name: Restore MOC From Backup
  #   #     if: ${{ vars.UPGRADE_TEST_ACTION == 'restore' }}
  #   #     id: restore
  #   #     run: |
  #   #       if [ -z $MOC_INSTANCE_HOST ]; then
  #   #         echo "mo-host=" >> $GITHUB_OUTPUT
  #   #       else
  #   #         echo "mo-host=${MOC_INSTANCE_HOST}" >> $GITHUB_OUTPUT
  #   #       fi
  #   #       if [ -z $MOC_INSTANCE_PORT ]; then
  #   #         echo "mo-port=" >> $GITHUB_OUTPUT
  #   #       else
  #   #         echo "mo-port=${MOC_INSTANCE_PORT}" >> $GITHUB_OUTPUT
  #   #       fi
  #   #       if [ -z $MOC_INSTANCE_USER ]; then
  #   #         echo "mo-user=" >> $GITHUB_OUTPUT
  #   #       else
  #   #         echo "mo-user=${MOC_INSTANCE_USER}" >> $GITHUB_OUTPUT
  #   #       fi
  #   #       if [ -z $MOC_INSTANCE_PASSWORD ]; then
  #   #         echo "mo-password=" >> $GITHUB_OUTPUT
  #   #       else
  #   #         echo "mo-password=${MOC_INSTANCE_PASSWORD}" >> $GITHUB_OUTPUT
  #   #       fi
  #   #     env:
  #   #       MOC_INSTANCE_HOST: 127.0.0.1
  #   #       MOC_INSTANCE_PORT: 6001
  #   #       MOC_INSTANCE_USER: dump
  #   #       MOC_INSTANCE_PASSWORD: 123
  #     - name: Backup MO Data
  #       id: restore
  #       run: |
  #         cd $GITHUB_WORKSPACE/tests
  #         export PYTHONPATH=$(pwd)
  #         env
  #         # python test.py
  #     - uses: ConorMacBride/install-package@v1
  #       with:
  #         apt: mysql-client
  #     - name: Test
  #       if: steps.restore.outputs.mo-host && steps.restore.outputs.mo-port && steps.restore.outputs.mo-user && steps.restore.outputs.mo-password
  #       shell: bash
  #       run: |
  #         echo "export ZTX_TEST='hello'" >> ~/.bashrc
  #         echo "hello 123" > test.log
  #         echo ${{ steps.restore.outputs.mo-host }}
  #         echo ${{ steps.restore.outputs.mo-port }}
  #         echo ${{ steps.restore.outputs.mo-user }}
  #         echo ${{ steps.restore.outputs.mo-password }}
  #         if [ ${{ vars.AUTO_UPGRADE }} = 'true' ]; then
  #           echo 123
  #         else
  #           echo 456
  #         fi
  #         # mysql -h ${{ steps.restore.outputs.mo-host }} -P ${{ steps.restore.outputs.mo-port }} -u ${{ steps.restore.outputs.mo-user }} -p${{ steps.restore.outputs.mo-password }}
  #     - name: Upload Logs
  #       uses: actions/upload-artifact@v4
  #       # if: always()
  #       if: steps.restore.outputs.mo-host && steps.restore.outputs.mo-port
  #       with:
  #         name: upgrade-test-logs
  #         path: |
  #           ${{ github.workspace }}/*.log
  #         retention-days: 7
    #   - name: Run Sysbench Tests
    #     run: |
    #       tree
    #       # cd $GITHUB_WORKSPACE/mo-sysbench
    #       # sysbench --mysql-host=$MO_HOST --mysql-port=$MO_PORT --mysql-user=$MO_USER --mysql-password=$MO_PASSWORD oltp_common.lua --mysql-db=sysbench_db --tables=10 --table_size=100000 --threads=1 --time=30 --report-interval=10 --create_secondary=off --auto_inc=off prepare
    #       cd $GITHUB_WORKSPACE/mo-load
    #       ./start.sh \
    #       -m SYSBENCH \
    #       -n 10 \
    #       -s 100000 \
    #       -h restore-freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
    #       -P 6001 \
    #       -u 018f7a51_3c66_7991_8402_37c1c0d47263:admin:accountadmin \
    #       -p Admin123 \
    #       -b sbtest
    #       RUNNER_TRACKING_ID="" && \
    #       nohup ./start.sh \
    #       -c cases/sysbench/mixed_10_100000/ \
    #       -t 10 \
    #       -d 1 \
    #       -h restore-freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
    #       -P 6001 \
    #       -u 018f7a51_3c66_7991_8402_37c1c0d47263:admin:accountadmin \
    #       -p Admin123 \
    #       -b sbtest \
    #       -g > sysbench.log &
    #   - name: Upload Logs
    #     uses: actions/upload-artifact@v4
    #     if: always()
    #     with:
    #       name: upgrade-test-logs
    #       path: |
    #         ${{ github.workspace }}/mo-load/sysbench.log
    #       retention-days: 7
    #   - name: Prepare data
    #     run: |
    #       sysbench \
    #       --mysql-host=restore-freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
    #       --mysql-port=6001 \
    #       --mysql-user=018f7a51_3c66_7991_8402_37c1c0d47263:admin:accountadmin \
    #       --mysql-password=Admin123 \
    #       oltp_common.lua \
    #       --mysql-db=sysbench_db \
    #       --tables=10 \
    #       --table_size=100 \
    #       --threads=1 \
    #       --time=30 \
    #       --report-interval=10 \
    #       --create_secondary=off \
    #       --auto_inc=off \
    #       prepare
    #   - name: Run OLTP readonly
    #     run: |
    #       sysbench \
    #       --mysql-host=restore-freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
    #       --mysql-port=6001 \
    #       --mysql-user=018f7a51_3c66_7991_8402_37c1c0d47263:admin:accountadmin \
    #       --mysql-password=Admin123 \
    #       --db-ps-mode=disable \
    #       oltp_read_only.lua \
    #       --mysql-db=sysbench_db \
    #       --tables=10 \
    #       --table_size=100 \
    #       --threads=10 \
    #       --time=30 \
    #       --report-interval=10 \
    #       --create_secondary=off \
    #       --auto_inc=off \
    #       --skip_trx=on \
    #       --range_selects=off \
    #       --point_selects=1 \
    #       run

#   test:
#     runs-on: ubuntu-latest
#     environment:
#       name: qa
#     needs:
#       - restore
#     steps:
#       - name: Test
#         shell: bash
#         if: needs.restore.outputs.mo-host && needs.restore.outputs.mo-port && needs.restore.outputs.mo-user && needs.restore.outputs.mo-password
#         run: |
#           echo "hello 456" > test.log
#           echo ${{ needs.restore.outputs.mo-host }}-${{ needs.restore.outputs.mo-port }}-${{needs.restore.outputs.mo-user }}-${{ needs.restore.outputs.mo-password }}
#           echo ${{ needs.restore.outputs.mo-host1 || needs.restore.outputs.mo-user1 || 'Admin123' }} | tee test456.log
#       - name: Upload Logs
#         uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: upgrade-test1-logs
#           path: |
#             ${{ github.workspace }}/*.log
#   run-tpch-tests:
#     runs-on: ubuntu-latest
#     environment:
#       name: qa
#     steps:
#       - name: Checkout mo-tpch
#         uses: actions/checkout@v4
#         with:
#           repository: matrixorigin/mo-tpch
#           ref: main
#           path: mo-tpch
#           token: ${{ secrets.GH_PAT }}
            
#       - uses: ConorMacBride/install-package@v1
#         with:
#           apt: mysql-client
            
#       - name: Run TPCH Tests
#         run: |
#           cd $GITHUB_WORKSPACE/mo-tpch
#           echo "$(date '+%Y-%m-%d %T') - Create database 'tpch_10g' for tpch tests"
#           mysql \
#           -h freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
#           -P 6001 \
#           -u 018fa03b_a5b1_752e_97af_980bd983f4bf:admin:accountadmin \
#           -pAdmin123 \
#           -e "drop database if exists tpch_10g; create database tpch_10g from sys publication mo_sample_data_tpch_sf10;"
#           echo "$(date '+%Y-%m-%d %T') - Start to run TPCH_10G tests"
#           ./run.sh \
#           -q all \
#           -s 10 \
#           -t 5 \
#           -d tpch_10g \
#           -h freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
#           -P 6001 \
#           -u 018fa03b_a5b1_752e_97af_980bd983f4bf:admin:accountadmin \
#           -p Admin123 \
#           2>&1 | tee tpch.log
#           tree

#   test-tpcc-job:
#     runs-on: ubuntu-latest
#     environment:
#       name: qa
#     needs:
#       - load-tpcc-data
#     steps:
#       - name: Set up Java1.8
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.8
        
#       - name: Echo Java Version
#         run: |
#           echo `java -version`
        
#       - name: Checkout mo-tpcc
#         uses: actions/checkout@v3
#         with:
#           repository: matrixorigin/mo-tpcc
#           ref: main
#           token: ${{ secrets.GH_PAT }}
        
#       - name: Execute tpcc          # tpcc 数据是直接导入到实例中的, 不在workflow流程中
#         env:
#           TpExecuteTime: 15               # 单位分钟
#         run: |
#           cd $GITHUB_WORKSPACE 
#           cp props.mo props_10.mo
#           sed -i 's/socketTimeout=60000/socketTimeout=60000/' props_10.mo 
#           sed -i '/.*terminals=*/c\terminals=10' props_10.mo
#           sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
#           sed -i '/.*user=*/c\user=018fa03b_a5b1_752e_97af_980bd983f4bf:admin:accountadmin' props_10.mo 
#           sed -i "/.*password=*/c\password=Admin123" props_10.mo 
#           sed -i '/runMins=*/c\runMins=5' props_10.mo
#           sed -i 's/tpcc/tpcc_10/g' props_10.mo
#           sed -i 's/127.0.0.1/freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech/g' props_10.mo          
#           ./runBenchmark.sh props_10.mo
#           ./runVerify.sh props_10.mo
#           tree
  # load-tpcc-data:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: qa
  #   # needs:
  #   #   - restore
  #   # outputs:
  #   #   mo-tpcc-host: ${{ needs.restore.outputs.mo-tpcc-host }}
  #   #   mo-tpcc-port: ${{ needs.restore.outputs.mo-tpcc-port }}
  #   #   mo-tpcc-user: ${{ needs.restore.outputs.mo-tpcc-user }}
  #   #   mo-tpcc-password: ${{ needs.restore.outputs.mo-tpcc-password }}
  #   # if: needs.restore.outputs.mo-tpcc-host && needs.restore.outputs.mo-tpcc-user
  #   steps:
  #     - name: Checkout mo-load-data
  #       uses: actions/checkout@v4
  #       with:
  #         repository: matrixorigin/mo-load-data
  #         ref: main
  #         path: mo-load-data
  #         token: ${{ secrets.GH_PAT }}
        
  #     - uses: ConorMacBride/install-package@v1
  #       with:
  #         apt: mysql-client
        
  #     - name: Load TPCC Data
  #       run: |
  #         cd $GITHUB_WORKSPACE/mo-load-data
  #         sed -i \
  #         -e 's/\(ENDPOINT:\).*/\1 oss-cn-hangzhou-internal.aliyuncs.com/' \
  #         -e 's/\(ACCESS_KEY_ID:\).*/\1 ${{ secrets.RESTORE_ALIYUN_AK }}/' \
  #         -e 's/\(SECRET_ACCESS_KEY:\).*/\1 ${{ secrets.RESTORE_ALIYUN_SK }}/' \
  #         access.yml
  #         cat access.yml
  #         ./load.sh \
  #         -c cases/00_from_s3/tpcc_10 -d tpcc_10 -m -r \
  #         -b moc-test-data \
  #         -h freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech \
  #         -P 6001 \
  #         -u 018fa85f_9a0f_76d4_9caa_633de613d90e:admin:accountadmin \
  #         -p Admin123 \
  #         2>&1 | tee load-tpcc-data.log
  #         tree
  #       env:
  #         ENDPOINT: oss-cn-hangzhou-internal.aliyuncs.com
  #         ACCESS_KEY_ID: ${{ secrets.RESTORE_ALIYUN_AK }}
  #         SECRET_ACCESS_KEY: ${{ secrets.RESTORE_ALIYUN_SK }}
  # run-tpcc-test:
  #   needs:
  #       - load-tpcc-data
  #   uses: matrixorigin/mocloud-tester/.github/workflows/scale_default_runner.yaml@main
  #   secrets: inherit
  #   with:
  #     JobName: test-tpcc-job
  #     Host: freetier-01.cn-hangzhou.cluster.cn-qa.matrixone.tech
  #     User: 018fa85f_9a0f_76d4_9caa_633de613d90e:admin:accountadmin
  #     Password: ${{ secrets.INSTANCE_PASSWORD }}
  #     TpExecuteTime: 60
  
  build-mo-image:
    runs-on: ubuntu-latest
    environment:
      name: qa
    if: false
    outputs:
      image-repo: ${{ steps.prep.outputs.upgrade-image-repository }}
      image-tag: ${{ steps.prep.outputs.upgrade-cluster-version }}
    steps:
      # - name: Build MO Image
      #   if: ${{ vars.UPGRADE_TEST_ACTION == 'restore' || vars.UPGRADE_TEST_ACTION == 'upgrade' && !steps.prep.outputs.upgrade-image-repository }}
      #   id: build
      #   uses: matrixorigin/gitops/.github/actions/mo-image@main
      #   with:
      #     branch: ${{ vars.BUILD_MO_BRANCH }}
      #     mo-version: ${{ vars.BUILD_MO_VERSION }}
      #     image-repo: registry.cn-hangzhou.aliyuncs.com/mocloud/matrixone
      #     platform: linux/amd64
      #     acr-username: ${{ secrets.ACR_USERNAME }}
      #     acr-password: ${{ secrets.ACR_PASSWORD }}

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: linux/amd64,linux/arm64
  
      - name: Set Up Docker Buildx
        id: buildx
        uses:  docker/setup-buildx-action@v3
  
      - name: Login to Hangzhou Alicloud Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/matrixone
          ref: ${{ vars.BUILD_MO_BRANCH }}
          token: ${{ secrets.GH_PAT }}
  
      - name: Make tag
        id: tag
        run: |
          git status
          # ACR_DOCKER_IMAGE="registry.cn-hangzhou.aliyuncs.com/mocloud/${GITHUB_REPOSITORY#*/}"
          if [ -z $DOCKER_REPOSITORY ]; then
            repo_name=$(git remote get-url origin | xargs basename -s .git)
          else
            repo_name=$DOCKER_REPOSITORY
          fi
          ACR_DOCKER_IMAGE="$DOCKER_REGISTRY/$DOCKER_NAMESPACE/$repo_name"
          # VERSION=${GITHUB_SHA::8}
          echo ${GITHUB_SHA}
          if [ -z $DOCKER_IMAGE_TAG ]; then
            repo_tag=${{ vars.BUILD_MO_VERSION }}-$(git rev-parse --short HEAD)-$(date +'%Y-%m-%d')
          else
            repo_tag=$DOCKER_IMAGE_TAG
          fi
          TAGS="$ACR_DOCKER_IMAGE:$repo_tag"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "image-repo=${ACR_DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "image-tag=${repo_tag}" >> $GITHUB_OUTPUT
          UPGRADE_IMAGE_REPOSITORY=$(echo ${{ vars.UPGRADE_IMAGE_REPOSITORY }})
          if [ -z $UPGRADE_IMAGE_REPOSITORY ]; then
            echo "UPGRADE_IMAGE_REPOSITORY=" >> $GITHUB_OUTPUT
          else
            echo "UPGRADE_IMAGE_REPOSITORY=${UPGRADE_IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
          fi
        env:
            DOCKER_REPOSITORY: ''
            DOCKER_REGISTRY: registry.cn-hangzhou.aliyuncs.com
            DOCKER_NAMESPACE: mocloud
            DOCKER_IMAGE_TAG: ''
  
      - name: Get Image Info
        run: |
          echo image-tags: ${{ steps.tag.outputs.tags }}
        
      - name: Build and Push
        if: ${{ (vars.UPGRADE_TEST_ACTION == 'restore' || vars.UPGRADE_TEST_ACTION == 'upgrade') && !steps.tag.outputs.UPGRADE_IMAGE_REPOSITORY }}
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./optools/images/Dockerfile
          platforms: linux/amd64
          # platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tag.outputs.tags }}
    
      - name: Prepare MO Image
        if: ${{ vars.UPGRADE_TEST_ACTION == 'restore' || vars.UPGRADE_TEST_ACTION == 'upgrade' }}
        id: prep
        shell: bash
        run: |
          UPGRADE_IMAGE_REPOSITORY=$(echo $UPGRADE_IMAGE_REPOSITORY)
          UPGRADE_CLUSTER_VERSION=$(echo $UPGRADE_CLUSTER_VERSION)

          # set output parameters
          if [ -z $UPGRADE_IMAGE_REPOSITORY ]; then
            UPGRADE_IMAGE_REPOSITORY=${{ steps.tag.outputs.image-repo }}
            if [ -z $UPGRADE_CLUSTER_VERSION ]; then
              UPGRADE_CLUSTER_VERSION=${{ steps.tag.outputs.image-tag }}
            else
              UPGRADE_CLUSTER_VERSION=`awk -v build_version=${{ steps.tag.outputs.image-tag }} -F ',' '{for (i=1; i<=NF; i++) if ($i == "") {print build_version} else {print $i}}' <<< "$UPGRADE_CLUSTER_VERSION" | tr '\n' ','`
              UPGRADE_CLUSTER_VERSION=${UPGRADE_CLUSTER_VERSION%,*}
            fi
          fi
          echo "upgrade-image-repository=${UPGRADE_IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
          echo "upgrade-cluster-version=${UPGRADE_CLUSTER_VERSION}" >> $GITHUB_OUTPUT
        env:
          UPGRADE_IMAGE_REPOSITORY: ${{ vars.UPGRADE_IMAGE_REPOSITORY }}
          UPGRADE_CLUSTER_VERSION: ${{ vars.UPGRADE_CLUSTER_VERSION }}

      # - name: Build MO Image
      #   if: ${{ (vars.UPGRADE_TEST_ACTION == 'restore' || vars.UPGRADE_TEST_ACTION == 'upgrade') && (!steps.prep.outputs.upgrade-image-repository || !steps.prep.outputs.upgrade-cluster-version) }}
      #   id: build
      #   uses: matrixorigin/gitops/.github/actions/mo-image@main
      #   with:
      #     branch: ${{ vars.BUILD_MO_BRANCH }}
      #     mo-version: ${{ vars.BUILD_MO_VERSION }}
      #     image-repo: registry.cn-hangzhou.aliyuncs.com/mocloud/matrixone
      #     platform: linux/amd64
      #     acr-username: ${{ secrets.ACR_USERNAME }}
      #     acr-password: ${{ secrets.ACR_PASSWORD }}
  # test-ccc:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: qa
  #   steps:
  #     - run: |
  #         echo 123
  # test-aaa:
  #   # if: false
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: qa
  #   outputs:
  #     mo-host: ${{ steps.s1.outputs.mo-host }}
  #     mo-port: ${{ steps.s1.outputs.mo-port }}
  #   steps:
  #     - name: s1
  #       id: s1
  #       run: |
  #         # echo "mo-host=localhost" >> $GITHUB_OUTPUT
  #         # echo "mo-port=6001" >> $GITHUB_OUTPUT
  #         exit 0
  test-bbb:
    runs-on: ubuntu-latest
    environment:
      name: qa
    # needs:
    #   - test-aaa
    #   - test-ccc
    # if: needs.test-aaa.outputs.mo-host && needs.test-aaa.outputs.mo-port && always()
    steps:
      - name: Backup Data for Restore
        # if: ${{ vars.UPGRADE_TEST_ACTION == 'restore' }}
        id: backup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              workflow_id: 'start-standalone-mo.yaml',
              ref: 'main',
              inputs: {}
            })
            console.log(result)
            const result00 = await github.rest.actions.listWorkflowRuns({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              workflow_id: 'start-standalone-mo.yaml',
              status: 'in_progress'
            })
            console.log(result00.data.workflow_runs)
            const result0 = await github.rest.actions.listWorkflowRuns({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              workflow_id: 'start-standalone-mo.yaml'
            })
            console.log(result0.data.workflow_runs[0].id)
            const result1 = await github.rest.actions.listJobsForWorkflowRun({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              run_id: result0.data.workflow_runs[0].id
            })
            console.log(result1.data.jobs[0].id)
            const result2 = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              job_id: result1.data.jobs[0].id
            })
            console.log(result2.url)
            return result2.url
      - name: Get
        # if: ${{ vars.UPGRADE_TEST_ACTION == 'restore' }}
        id: get
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const result0 = await github.rest.actions.listWorkflowRuns({
              owner: 'matrixorigin',
              repo: 'gitops',
              workflow_id: 'aliyun-mo-incremental-backup.yaml',
              status: 'success'
            })
            console.log(result0.data.workflow_runs[0].id)
            const result1 = await github.rest.actions.listJobsForWorkflowRun({
              owner: 'matrixorigin',
              repo: 'gitops',
              run_id: result0.data.workflow_runs[0].id
            })
            console.log(result1.data.jobs[0].id)
            const result2 = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: 'matrixorigin',
              repo: 'gitops',
              job_id: result1.data.jobs[0].id
            })
            console.log(result2.url)
            const result = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: 'TangxingZhou',
              repo: 'workflow-test',
              job_id: '28405776482'
            })
            console.log(result)
            return result2.url
      - name: test
        id: get-id
        run: |
          set -x
          backup_logs=$(curl ${{ steps.backup.outputs.result }})
          backup_bucket=$(grep "shell args" <<< "$backup_logs" | awk '{print $7}')
          backup_bucket_path=$(grep "shell args" <<< "$backup_logs" | awk '{print $8}')
          backup_id=$(grep -Eo 'new backupID:\s*([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})' <<< "$backup_logs" | awk '{print $3}')
          echo "BACKUP_S3_BUCKET=$backup_bucket" >> $GITHUB_OUTPUT
          echo "BACKUP_S3_BUCKET_FILE_PATH=$backup_bucket_path" >> $GITHUB_OUTPUT
          echo "BACKUP_ID=$backup_id" >> $GITHUB_OUTPUT
      - name: debug
        run: |
          echo ${{ steps.get-id.outputs.BACKUP_S3_BUCKET }}/${{ steps.get-id.outputs.BACKUP_S3_BUCKET_FILE_PATH }}:${{ steps.get-id.outputs.BACKUP_ID }}
