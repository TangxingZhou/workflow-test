name:  MOC Upgrade Test

on:
  # schedule:
  #   - cron: '0 18 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: The action to perform
        required: true
        type: choice
        options:
          - backup
          - restore
          - upgrade
          - clear
        default: restore
      backup_cluster:
        description: Backups to be made for the cluster
        required: false
        type: string
      backup_cluster_version:
        description: The cluster version for CN that performs the backup job
        required: false
        type: string
        default: nightly-e94ba155
      backup_s3_bucket:
        description: Backups to be made into the S3 bucket
        required: false
        type: string
        default: 'moc-backup-test'
      backup_s3_bucket_file_path:
        description: Backups to be made into the S3 bucket path
        required: false
        type: string
      backup_id:
        description: ID of backup to restore
        required: false
        type: string
      restore_cluster:
        description: The cluster to be restored
        required: false
        type: string
        default: restore-freetier-02
      restore_cluster_version:
        description: The cluster version to be restored
        required: false
        type: string
        # default: 'nightly-9d616832a'
      restore_s3_bucket:
        description: The S3 bucket to restore
        required: false
        type: string
        default: 'moc-backup-test'
      restore_s3_bucket_file_path:
        description: The S3 bucket path to restore
        required: false
        type: string
      upgrade_cluster_version:
        description: The target version to upgrade
        required: false
        type: string
        # default: 'nightly-9d616832b'
env:
  email: ${{ vars.UPGRADE_TEST_EMAIL }}
  password: ${{ secrets.UPGRADE_TEST_PASSWORD }}
  database_platform_password: ${{ secrets.DATABASE_PLATFORM_PASSWORD }}
  management_platform_url: ${{ secrets.MANAGEMENT_PLATFORM_URL }}
  management_platform_user: ${{ secrets.MANAGEMENT_PLATFORM_USER }}
  management_platform_password: ${{ secrets.MANAGEMENT_PLATFORM_PASSWORD }}
  env: qa
  provider: aliyun
  region: cn-hangzhou
  k8s_unit_config: ${{ secrets.K8S_UNIT_CONFIG }}
  k8s_controller_config: ${{ secrets.K8S_CONTROLLER_CONFIG }}
jobs:
  build-mo-image:
    runs-on: ubuntu-latest
    environment:
      name: qa
    outputs:
      image-repo: ${{ steps.prep.outputs.upgrade-image-repository || steps.build.outputs.image-repo }}
      image-tag: ${{ steps.prep.outputs.upgrade-image-version || steps.build.outputs.image-tag }}
    # if: ${{ inputs.action == 'upgrade' || (!inputs.action && vars.UPGRADE_TEST_ACTION == 'upgrade') }}
    steps:
      - name: Parse Variables
        id: parse
        run: |
          UPGRADE_IMAGE_REPOSITORY=$(echo ${{ vars.UPGRADE_IMAGE_REPOSITORY }})
          UPGRADE_CLUSTER_VERSION=$(echo ${{ vars.UPGRADE_CLUSTER_VERSION || vars.UPGRADE_CLUSTER_VERSION }})
          if [ -z $UPGRADE_IMAGE_REPOSITORY ]; then
            echo "UPGRADE_IMAGE_REPOSITORY=" >> $GITHUB_OUTPUT
          else
            echo "UPGRADE_IMAGE_REPOSITORY=${UPGRADE_IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
          fi
          if [ -z $UPGRADE_CLUSTER_VERSION ]; then
            echo "UPGRADE_CLUSTER_VERSION=" >> $GITHUB_OUTPUT
          else
            echo "UPGRADE_CLUSTER_VERSION=${UPGRADE_CLUSTER_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Action
        if: ${{ (inputs.action == 'upgrade' || vars.UPGRADE_TEST_ACTION == 'upgrade') && !steps.parse.outputs.UPGRADE_IMAGE_REPOSITORY }}
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/gitops
          ref: main
          token: ${{ secrets.GH_PAT }}
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            .github/actions/mo-image
          path: github-actions
    
      - name: Build MO Image
        if: ${{ (inputs.action == 'upgrade' || vars.UPGRADE_TEST_ACTION == 'upgrade') && !steps.parse.outputs.UPGRADE_IMAGE_REPOSITORY }}
        id: build
        # uses: matrixorigin/gitops/.github/actions/mo-image@main
        uses: ./github-actions/.github/actions/mo-image
        with:
          branch: ${{ vars.BUILD_MO_BRANCH }}
          mo-version: ${{ vars.BUILD_MO_VERSION }}
          image-repo: registry.cn-hangzhou.aliyuncs.com/mocloud/matrixone
          platform: linux/amd64
          acr-username: ${{ secrets.ACR_USERNAME }}
          acr-password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Prepare MO Image
        if: ${{ inputs.action == 'upgrade' || vars.UPGRADE_TEST_ACTION == 'upgrade' }}
        id: prep
        shell: bash
        run: |
          UPGRADE_IMAGE_REPOSITORY=${{ steps.parse.outputs.UPGRADE_IMAGE_REPOSITORY }}
          UPGRADE_CLUSTER_VERSION=${{ steps.parse.outputs.UPGRADE_CLUSTER_VERSION }}
          if [ -z $UPGRADE_IMAGE_REPOSITORY ]; then
            UPGRADE_IMAGE_REPOSITORY=${{ steps.build.outputs.image-repo }}
            if [ -z $UPGRADE_CLUSTER_VERSION ]; then
              UPGRADE_CLUSTER_VERSION=${{ steps.build.outputs.image-tag }}
            else
              UPGRADE_CLUSTER_VERSION=`awk -v build_version=${{ steps.build.outputs.image-tag }} -F ',' '{for (i=1; i<=NF; i++) if ($i == "") {print build_version} else {print $i}}' <<< "$UPGRADE_CLUSTER_VERSION" | tr '\n' ','`
              UPGRADE_CLUSTER_VERSION=${UPGRADE_CLUSTER_VERSION%,*}
            fi
          fi
          echo "upgrade-image-repository=${UPGRADE_IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
          echo "upgrade-cluster-version=${UPGRADE_CLUSTER_VERSION}" >> $GITHUB_OUTPUT
  
  upgrade-test:
    needs:
      - build-mo-image
    runs-on: ubuntu-latest
    environment:
      name: qa

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: matrixone-cloud/mocloud-tester
          ref: qa-txzhou
          token: ${{ secrets.GH_PAT }}

      - name: Set Up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Python Dependencies
        run: |
          cd $GITHUB_WORKSPACE
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Backup MO Data
        if: ${{ inputs.action == 'backup' || vars.UPGRADE_TEST_ACTION == 'backup' }}
        run: |
          cd $GITHUB_WORKSPACE
          export PYTHONPATH=$(pwd)
          python src/upgrade/main.py backup
        env:
          BACKUP_ALIYUN_AK: ${{ secrets.BACKUP_ALIYUN_AK }}
          BACKUP_ALIYUN_SK: ${{ secrets.BACKUP_ALIYUN_SK }}
          BACKUP_CLUSTER: ${{ inputs.backup_cluster || vars.BACKUP_CLUSTER }}
          BACKUP_CLUSTER_VERSION: ${{ inputs.backup_cluster_version || vars.BACKUP_CLUSTER_VERSION }}
          BACKUP_ID: ${{ inputs.backup_id || vars.BACKUP_ID }}
          BACKUP_S3_BUCKET: ${{ inputs.backup_s3_bucket || vars.BACKUP_S3_BUCKET }}
          BACKUP_S3_BUCKET_FILE_PATH: ${{ inputs.backup_s3_bucket_file_path || vars.BACKUP_S3_BUCKET_FILE_PATH }}
          MO_IMAGE_REPOSITORY: ${{ vars.MO_IMAGE_REPOSITORY }}

      - name: Restore MOC From Backup
        if: ${{ inputs.action == 'restore' || vars.UPGRADE_TEST_ACTION == 'restore' }}
        run: |
          cd $GITHUB_WORKSPACE
          export PYTHONPATH=$(pwd)
          python src/upgrade/main.py --disable-mo-tests restore --force --create-instance --all
        env:
          BACKUP_ALIYUN_AK: ${{ secrets.BACKUP_ALIYUN_AK }}
          BACKUP_ALIYUN_SK: ${{ secrets.BACKUP_ALIYUN_SK }}
          RESTORE_ALIYUN_AK: ${{ secrets.RESTORE_ALIYUN_AK }}
          RESTORE_ALIYUN_SK: ${{ secrets.RESTORE_ALIYUN_SK }}
          BACKUP_S3_BUCKET: ${{ inputs.backup_s3_bucket || vars.BACKUP_S3_BUCKET }}
          BACKUP_S3_BUCKET_FILE_PATH: ${{ inputs.backup_s3_bucket_file_path || vars.BACKUP_S3_BUCKET_FILE_PATH }}
          BACKUP_ID: ${{ inputs.backup_id || vars.BACKUP_ID }}
          RESTORE_CLUSTER: ${{ inputs.restore_cluster || vars.RESTORE_CLUSTER }}
          RESTORE_CLUSTER_VERSION: ${{ inputs.restore_cluster_version || vars.RESTORE_CLUSTER_VERSION }}
          RESTORE_S3_BUCKET: ${{ inputs.restore_s3_bucket || vars.RESTORE_S3_BUCKET }}
          RESTORE_S3_BUCKET_FILE_PATH: ${{ inputs.restore_s3_bucket_file_path || vars.RESTORE_S3_BUCKET_FILE_PATH }}
          RESTORE_MOC_PLUGIN_TAG: ${{ vars.RESTORE_MOC_PLUGIN_TAG }}
          MO_IMAGE_REPOSITORY: ${{ vars.MO_IMAGE_REPOSITORY }}
          INSTANCE_PASSWORD: ${{ secrets.INSTANCE_PASSWORD }}
      
      - name: Upgrade MOC
        if: ${{ inputs.action == 'upgrade' || vars.UPGRADE_TEST_ACTION == 'upgrade' }}
        run: |
          cd $GITHUB_WORKSPACE
          export PYTHONPATH=$(pwd)
          python src/upgrade/main.py --disable-mo-tests upgrade
        env:
          RESTORE_CLUSTER: ${{ inputs.restore_cluster || vars.RESTORE_CLUSTER }}
          UPGRADE_IMAGE_REPOSITORY: ${{ needs.build-mo-image.outputs.image-repo }}
          UPGRADE_CLUSTER_VERSION: ${{ needs.build-mo-image.outputs.image-repo }}
          UPGRADE_MOC_PLUGIN_TAG: ${{ vars.UPGRADE_MOC_PLUGIN_TAG }}
          INSTANCE_PASSWORD: ${{ secrets.INSTANCE_PASSWORD }}
      
      - name: Clear MOC
        if: ${{ inputs.action == 'clear' || vars.UPGRADE_TEST_ACTION == 'clear' }}
        run: |
          cd $GITHUB_WORKSPACE
          export PYTHONPATH=$(pwd)
          python src/upgrade/main.py clear --force
        env:
          RESTORE_CLUSTER: ${{ inputs.restore_cluster || vars.RESTORE_CLUSTER }}

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: upgrade-test-logs
          path: |
            ${{ github.workspace }}/moc-upgrade.log
          retention-days: 7
