# https://github.com/matrixorigin/matrixone/blob/main/.github/workflows/image-build.yml
name:  Build and Push Images

on:
#   schedule:
#     - cron: '0 22 * * *'
#   release:
#     types:
#       - published
  workflow_dispatch:
    inputs:
      project:
        description: The project of image to be built
        required: true
        type: choice
        options:
          - mo-backup
          - matrixone
          - none
        default: none

      ref:
        description: The project ref of image to be built
        required: true
        type: string
        default: main

      image:
        description: The image to be tagged
        required: false
        type: string

      repository:
        description: Repository of image
        required: false
        type: string  

      registry:
        description: Image registry
        required: true
        type: string
        default: registry.cn-hangzhou.aliyuncs.com
      
      namespace:
        description: Namespace of image registry
        required: true
        type: string
        default: mocloud
      
      tag:
        description: The tag of image to be built
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Set Up QEMU
        if: ${{ inputs.project != 'none' }}
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: linux/amd64,linux/arm64

      - name: Set Up Docker Buildx
        if: ${{ inputs.project != 'none' }}
        id: buildx
        uses:  docker/setup-buildx-action@v3

    #   - name: Login to DockerHub
    #     uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Alicloud Container Registry
        if: ${{ inputs.project != 'none' || inputs.image }}
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Checkout
        if: ${{ inputs.project == 'mo-backup' }}
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/mo-backup
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GH_PAT }}
          # fetch-depth: 0

      - name: Checkout
        if: ${{ inputs.project == 'matrixone' }}
        uses: actions/checkout@v4
        with:
          repository: matrixorigin/matrixone
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GH_PAT }}

      - name: Prepare
        if: ${{ inputs.project != 'none' }}
        id: prep
        run: |
          git status
          # ACR_DOCKER_IMAGE="registry.cn-hangzhou.aliyuncs.com/mocloud/${GITHUB_REPOSITORY#*/}"
          if [ -z $DOCKER_REPOSITORY ]; then
            repo_name=$(git remote get-url origin | xargs basename -s .git)
          else
            repo_name=$DOCKER_REPOSITORY
          fi
          ACR_DOCKER_IMAGE="$DOCKER_REGISTRY/$DOCKER_NAMESPACE/$repo_name"
          # VERSION=${GITHUB_SHA::8}
          echo ${GITHUB_SHA}
          if [ -z $DOCKER_IMAGE_TAG ]; then
            repo_tag=$(git rev-parse --short HEAD)
            repo_tag=${repo_tag::7}
          else
            repo_tag=$DOCKER_IMAGE_TAG
          fi
          TAGS="$ACR_DOCKER_IMAGE:$repo_tag"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        env:
          DOCKER_REPOSITORY: ${{ inputs.repository }}
          DOCKER_REGISTRY: ${{ inputs.registry }}
          DOCKER_NAMESPACE: ${{ inputs.namespace }}
          DOCKER_IMAGE_TAG: ${{ inputs.tag }}

      - name: Get Image Info
        if: ${{ inputs.project != 'none' }}
        run: |
          echo image-tags: ${{ steps.prep.outputs.tags }}
      
      - name: Build and Push
        if: ${{ inputs.project != 'none' }}
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
      
      - name: Pull and Push
        if: ${{ inputs.image }}
        run: |
          docker pull $DOCKER_IMAGE
          if [ -z $DOCKER_REPOSITORY ]; then
            repo_name=${DOCKER_IMAGE%:*}
            repo_name=${repo_name##*/}
          else
            repo_name=$DOCKER_REPOSITORY
          fi
          if [ -z $DOCKER_IMAGE_TAG ]; then
            repo_tag=${DOCKER_IMAGE##*:}
          else
            repo_tag=$DOCKER_IMAGE_TAG
          fi
          docker tag $DOCKER_IMAGE $DOCKER_REGISTRY/$DOCKER_NAMESPACE/$repo_name:$repo_tag
          docker push $DOCKER_REGISTRY/$DOCKER_NAMESPACE/$repo_name:$repo_tag
          echo $DOCKER_REGISTRY/$DOCKER_NAMESPACE/$repo_name:$repo_tag
        env:
          DOCKER_IMAGE: ${{ inputs.image }}
          DOCKER_REPOSITORY: ${{ inputs.repository }}
          DOCKER_REGISTRY: ${{ inputs.registry }}
          DOCKER_NAMESPACE: ${{ inputs.namespace }}
          DOCKER_IMAGE_TAG: ${{ inputs.tag }}
#   release:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: login to aliyun acr
#         uses: aliyun/acr-login@v1
#         with:
#           login-server: registry.cn-hangzhou.aliyuncs.com
#           username: "${{ secrets.ALIYUN_DOCKER_USER }}"
#           password: "${{ secrets.ALIYUN_DOCKER_PASSWORD }}"
#           region-id: cn-hangzhou

#       - name: set up docker buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v1

#       - name: docker meta
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: registry.cn-hangzhou.aliyuncs.com/ack-cos/cos-inspector
#           tags: |
#             type=sha
#             type=ref,event=branch,suffix=-{{date 'YYYYMMDD'}}
#             type=semver,pattern={{version}}

#       - name: build and push
#         uses: docker/build-push-action@v2
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           context: .
#           secrets: "github=${{ secrets.MY_GIT_TOKEN }}"
#           file: Dockerfile
#           platforms: linux/amd64
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
