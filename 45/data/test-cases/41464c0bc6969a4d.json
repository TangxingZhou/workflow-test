{"uid":"41464c0bc6969a4d","name":"Restore MO data","fullName":"src.tests.upgrade.test_mo_upgrade.UpgradeMOTestSuite#test_restore_mo_data","historyId":"853c47e2b6de3c3bedba45c5edecbea1","time":{"start":1710768737078,"stop":1710768737755,"duration":677},"description":"This test attempts to restore MO data.","descriptionHtml":"<p>This test attempts to restore MO data.</p>\n","status":"broken","statusMessage":"ValueError: 'Pending' is not a valid PodPhase","statusTrace":"self = <src.tests.upgrade.test_mo_upgrade.UpgradeMOTestSuite object at 0x7bb184011eb0>\nconfigs = {'cluster': {'imageRepository': {'from': 'docker.io/volgariver6/matrixone', 'to': 'registry.cn-hangzhou.aliyuncs.com/m... 'cluster': {'name': 'restore-freetier-01', 'version': '1.1.1-fix'}, 'dir': 's3', ...}}, 'timestamp': '20240318133212'}\nmoc_templates = {'backup-cluster-template.yaml.j2': <Template 'backup-cluster-template.yaml.j2'>, 'backup-pod-template.yaml.j2': <Temp... <Template 'mo-cluster-template.yaml.j2'>, 'root-cluster-template.yaml.j2': <Template 'root-cluster-template.yaml.j2'>}\nroot_cluster_is_active = False, backup_s3_storage_is_specified = True\ns3_is_accessible_and_empty = True\n\n    @pytest.mark.p0\n    @pytest.mark.dependency()\n    @allure.title(\"Restore MO data\")\n    @allure.description(\"This test attempts to restore MO data.\")\n    @allure.tag(\"MO\", \"Restore\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"TangxingZhou\")\n    # @allure.link(\"https://github.com/matrixorigin/MO-Cloud/issues\", name=\"GitHub\")\n    @allure.issue(\"https://github.com/matrixorigin/MO-Cloud/issues/2542\", name='issue-2542')\n    # @allure.testcase(\"https://github.com/matrixorigin/MO-Cloud/issues/2542\", name='TC-2542')\n    def test_restore_mo_data(self, configs, moc_templates, root_cluster_is_active, backup_s3_storage_is_specified,\n                             s3_is_accessible_and_empty):\n        # 恢复集群存在且状态是'Active'，则跳过恢复数据的操作\n        if root_cluster_is_active:\n            reason = f\"Cluster {configs['cluster']['name']} to be restored is Active.\"\n            logger.info(reason)\n            pytest.skip(reason)\n        else:\n            if backup_s3_storage_is_specified:\n                # 恢复集群不存在，恢复操作所需的备份存储信息都配置了，S3存储访问的AK/SK信息也配置了，而且S3存储是空的，则进行恢复数据操作\n                if s3_is_accessible_and_empty:\n                    logger.debug('S3 storage is accessible and empty, restore data.')\n                    with allure.step(\"开始恢复数据\"):\n                        body = render_yaml_template_to_json(moc_templates[BACKUP_POD_TEMPLATE], action='restore', **configs)\n                        restore_pod = self.k8s_unit_client.v1_api.create_namespaced_pod_with_http_info(\n                            self._namespace, body)\n                        assert restore_pod[1] == 201, f\"Failed to create restore pod {body['metadata']['name']}.\"\n                    UpgradeMOTestSuite._restore_cluster_job = body['metadata']['name']\n                    restore_commands = ' '.join(body['spec']['containers'][0]['command'] +\n                                                body['spec']['containers'][0]['args'])\n                    logger.debug(f\"Start to restore data with command of mo-backup as: {restore_commands}\")\n                    # TODO: wait until backup job completes\n                    with allure.step(\"等待恢复数据的任务执行成功\"):\n>                       wait_for(namespaced_pod_successfully_completed,\n                                 3 * 60, 2 * 60 * 60,\n                                 self.k8s_unit_client, body['metadata']['name'], self._namespace)\n\nsrc/tests/upgrade/test_mo_upgrade.py:688: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tests/upgrade/test_mo_upgrade.py:230: in wait_for\n    while not f(*args, **kwargs) and time.time() - start < timeout if timeout > 0 else True:\nsrc/cloud/k8s/pod.py:27: in namespaced_pod_successfully_completed\n    return namespaced_pod_is_in_expected_phase(k8s_client, name, namespace, PodPhase.succeeded)\nsrc/cloud/k8s/pod.py:32: in namespaced_pod_is_in_expected_phase\n    if PodPhase(pod.status.phase) == expected_phase:\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:339: in __call__\n    return cls.__new__(cls, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'PodPhase'>, value = 'Pending'\n\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n                if result is None and exc is None:\n>                   raise ve_exc\nE                   ValueError: 'Pending' is not a valid PodPhase\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:663: ValueError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"k8s_controller_client","time":{"start":1710768732913,"stop":1710768732922,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"k8s_unit_client","time":{"start":1710768732922,"stop":1710768732931,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_xunit_setup_module_fixture_src.tests.upgrade.test_mo_upgrade","time":{"start":1710768732931,"stop":1710768732931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"configs","time":{"start":1710768732931,"stop":1710768732936,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_module","time":{"start":1710768732931,"stop":1710768732931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"envs","time":{"start":1710768732931,"stop":1710768732931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"moc_templates","time":{"start":1710768732936,"stop":1710768732966,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_class","time":{"start":1710768732966,"stop":1710768734224,"duration":1258},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_UpgradeMOTestSuite","time":{"start":1710768732966,"stop":1710768732966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"backup_s3_storage_is_specified","time":{"start":1710768734224,"stop":1710768734224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"s3_is_accessible_and_empty","time":{"start":1710768735049,"stop":1710768736806,"duration":1757},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"root_cluster_is_active","time":{"start":1710768736807,"stop":1710768737077,"duration":270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"This test attempts to restore MO data.","status":"broken","statusMessage":"ValueError: 'Pending' is not a valid PodPhase","statusTrace":"self = <src.tests.upgrade.test_mo_upgrade.UpgradeMOTestSuite object at 0x7bb184011eb0>\nconfigs = {'cluster': {'imageRepository': {'from': 'docker.io/volgariver6/matrixone', 'to': 'registry.cn-hangzhou.aliyuncs.com/m... 'cluster': {'name': 'restore-freetier-01', 'version': '1.1.1-fix'}, 'dir': 's3', ...}}, 'timestamp': '20240318133212'}\nmoc_templates = {'backup-cluster-template.yaml.j2': <Template 'backup-cluster-template.yaml.j2'>, 'backup-pod-template.yaml.j2': <Temp... <Template 'mo-cluster-template.yaml.j2'>, 'root-cluster-template.yaml.j2': <Template 'root-cluster-template.yaml.j2'>}\nroot_cluster_is_active = False, backup_s3_storage_is_specified = True\ns3_is_accessible_and_empty = True\n\n    @pytest.mark.p0\n    @pytest.mark.dependency()\n    @allure.title(\"Restore MO data\")\n    @allure.description(\"This test attempts to restore MO data.\")\n    @allure.tag(\"MO\", \"Restore\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"TangxingZhou\")\n    # @allure.link(\"https://github.com/matrixorigin/MO-Cloud/issues\", name=\"GitHub\")\n    @allure.issue(\"https://github.com/matrixorigin/MO-Cloud/issues/2542\", name='issue-2542')\n    # @allure.testcase(\"https://github.com/matrixorigin/MO-Cloud/issues/2542\", name='TC-2542')\n    def test_restore_mo_data(self, configs, moc_templates, root_cluster_is_active, backup_s3_storage_is_specified,\n                             s3_is_accessible_and_empty):\n        # 恢复集群存在且状态是'Active'，则跳过恢复数据的操作\n        if root_cluster_is_active:\n            reason = f\"Cluster {configs['cluster']['name']} to be restored is Active.\"\n            logger.info(reason)\n            pytest.skip(reason)\n        else:\n            if backup_s3_storage_is_specified:\n                # 恢复集群不存在，恢复操作所需的备份存储信息都配置了，S3存储访问的AK/SK信息也配置了，而且S3存储是空的，则进行恢复数据操作\n                if s3_is_accessible_and_empty:\n                    logger.debug('S3 storage is accessible and empty, restore data.')\n                    with allure.step(\"开始恢复数据\"):\n                        body = render_yaml_template_to_json(moc_templates[BACKUP_POD_TEMPLATE], action='restore', **configs)\n                        restore_pod = self.k8s_unit_client.v1_api.create_namespaced_pod_with_http_info(\n                            self._namespace, body)\n                        assert restore_pod[1] == 201, f\"Failed to create restore pod {body['metadata']['name']}.\"\n                    UpgradeMOTestSuite._restore_cluster_job = body['metadata']['name']\n                    restore_commands = ' '.join(body['spec']['containers'][0]['command'] +\n                                                body['spec']['containers'][0]['args'])\n                    logger.debug(f\"Start to restore data with command of mo-backup as: {restore_commands}\")\n                    # TODO: wait until backup job completes\n                    with allure.step(\"等待恢复数据的任务执行成功\"):\n>                       wait_for(namespaced_pod_successfully_completed,\n                                 3 * 60, 2 * 60 * 60,\n                                 self.k8s_unit_client, body['metadata']['name'], self._namespace)\n\nsrc/tests/upgrade/test_mo_upgrade.py:688: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tests/upgrade/test_mo_upgrade.py:230: in wait_for\n    while not f(*args, **kwargs) and time.time() - start < timeout if timeout > 0 else True:\nsrc/cloud/k8s/pod.py:27: in namespaced_pod_successfully_completed\n    return namespaced_pod_is_in_expected_phase(k8s_client, name, namespace, PodPhase.succeeded)\nsrc/cloud/k8s/pod.py:32: in namespaced_pod_is_in_expected_phase\n    if PodPhase(pod.status.phase) == expected_phase:\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:339: in __call__\n    return cls.__new__(cls, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'PodPhase'>, value = 'Pending'\n\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n                if result is None and exc is None:\n>                   raise ve_exc\nE                   ValueError: 'Pending' is not a valid PodPhase\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:663: ValueError","steps":[{"name":"开始恢复数据","time":{"start":1710768737078,"stop":1710768737364,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"等待恢复数据的任务执行成功","time":{"start":1710768737364,"stop":1710768737615,"duration":251},"status":"broken","statusMessage":"ValueError: 'Pending' is not a valid PodPhase\n","statusTrace":"  File \"/home/runner/work/workflow-test/workflow-test/src/tests/upgrade/test_mo_upgrade.py\", line 688, in test_restore_mo_data\n    wait_for(namespaced_pod_successfully_completed,\n  File \"/home/runner/work/workflow-test/workflow-test/src/tests/upgrade/test_mo_upgrade.py\", line 230, in wait_for\n    while not f(*args, **kwargs) and time.time() - start < timeout if timeout > 0 else True:\n  File \"/home/runner/work/workflow-test/workflow-test/src/cloud/k8s/pod.py\", line 27, in namespaced_pod_successfully_completed\n    return namespaced_pod_is_in_expected_phase(k8s_client, name, namespace, PodPhase.succeeded)\n  File \"/home/runner/work/workflow-test/workflow-test/src/cloud/k8s/pod.py\", line 32, in namespaced_pod_is_in_expected_phase\n    if PodPhase(pod.status.phase) == expected_phase:\n  File \"/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py\", line 339, in __call__\n    return cls.__new__(cls, value)\n  File \"/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py\", line 663, in __new__\n    raise ve_exc\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"98cedd30c6d1fd2f","name":"log","source":"98cedd30c6d1fd2f.txt","type":"text/plain","size":29882}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_UpgradeMOTestSuite::0","time":{"start":1710768737906,"stop":1710768738185,"duration":279},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_xunit_setup_module_fixture_src.tests.upgrade.test_mo_upgrade::0","time":{"start":1710768738187,"stop":1710768738187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"MOC Test Automation"},{"name":"tag","value":"Restore"},{"name":"story","value":"Backup/Restore and Upgrade MO Cluster"},{"name":"suite","value":"Restore MO Cluster and Upgrade"},{"name":"feature","value":"Backup/Restore and Upgrade MO Cluster"},{"name":"severity","value":"critical"},{"name":"owner","value":"TangxingZhou"},{"name":"tag","value":"MO"},{"name":"tag","value":"dependency"},{"name":"tag","value":"p0"},{"name":"parentSuite","value":"src.tests.upgrade"},{"name":"subSuite","value":"UpgradeMOTestSuite"},{"name":"host","value":"fv-az665-922"},{"name":"thread","value":"2198-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.upgrade.test_mo_upgrade"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"issue-2542","url":"https://github.com/matrixorigin/MO-Cloud/issues/2542","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"critical","owner":"TangxingZhou","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"e43808c7f29a60d8","reportUrl":"https://TangxingZhou.github.io/workflow-test/44//#testresult/e43808c7f29a60d8","status":"passed","time":{"start":1710474269290,"stop":1710480416735,"duration":6147445}},{"uid":"42390cb2335e4f1f","reportUrl":"https://TangxingZhou.github.io/workflow-test/42//#testresult/42390cb2335e4f1f","status":"passed","time":{"start":1710252679951,"stop":1710256840912,"duration":4160961}}]},"tags":["p0","MO","dependency","Restore"]},"source":"41464c0bc6969a4d.json","parameterValues":[]}